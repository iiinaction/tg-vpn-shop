import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from models import User
import dao.user_dao as db
import states as st
import keyboards as kb
from dao.middleware import BaseDatabaseMiddleware
from datetime import datetime, timedelta, timezone
from bot import scheduler
from outline_api import create_access_key, rename_access_key
from apsched import send_message
from dao.user_dao import User, UserDAO, UserVPN
from dao.schemas import TelegramIDModel
from bot import bot
from config import settings

#–†–∞–±–æ—Ç–∞ —Å middlewares
client = Router()

#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@client.message(CommandStart())
async def send_main_menu(message:Message, session_with_commit:AsyncSession, state:FSMContext):
    user_id = message.from_user.id
    user_info = await UserDAO.find_one_or_none(
        session = session_with_commit,
        filters = TelegramIDModel(telegram_id = user_id)
    )
    if user_info.trial_until > datetime.now():
        if user_info.trial_until > datetime.now():
            await message.answer(
                text = f'ü§ñ<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> \n\nüÜì–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {user_info.trial_until}',
                reply_markup=kb.client_main_kb
                )
    else:
        await message.answer(
                text=f'ü§ñ<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> \n\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π,—É—Å—Ç–æ–π—á–∏–≤—ã–π –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π VPN —É –Ω–∞—Å!',
                reply_markup=kb.client_main_kb(user_info.telegram_id)
            )
        await state.clear()

@client.callback_query(F.data == 'my_profile')
async def page_about(call:CallbackQuery, session_without_commit:AsyncSession):
    await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")
    #–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    purchases = await UserDAO.get_purchase_statistic(session=session_without_commit, telegram_id=call.from_user.id)
    print(f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ {purchases}')
    if purchases is None:
        total_amount = 0
        total_purchases = 0
    else:
        total_amount = purchases.get("total_amount", 0)
        total_purchases = purchases.get("total_purchases", 0)
    #—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
    if total_purchases ==0:
        await call.message.answer(
            text = "üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
                 "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
            reply_markup=kb.client_main_kb(call.from_user.id)
        )
    else:
        text = (f"üõç <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: <b>{total_purchases}</b>\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫?"
            )
        await call.message.answer(
            text=text,
            reply_markup=kb.go_on_main()
        )



@client.callback_query(F.data.startswith('category_'))
async def choose_country(callback:CallbackQuery, user:User):
    await callback.answer('–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞')
    vpn_category_id = callback.data.split('_'[1])
    await callback.message.edit_text(f'üè≥Ô∏è<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</b> \n\n –°–æ–≤–µ—Ç—É–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –ø–æ–±–ª–∏–∂–µ –∫ –≤–∞–º –¥–ª—è –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏',
                                     reply_markup=await kb.get_countries(vpn_category_id, user))





@client.callback_query(F.data=='back_to_choose_category')
async def choose_vpn_category(event: Message | CallbackQuery):
    if isinstance(event, Message):
        await event.answer('üåé<b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b> \n\n Outline - ?')

    elif isinstance(event, CallbackQuery):
        await event.answer('–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞')
        await event.message.edit_text('üåé<b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b> \n\n Outline - ?')


#–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
@client.callback_query(F.data.startswith('buy_'))
async def process_about(call:CallbackQuery, session_without_commit:AsyncSession):
    user_info = await UserDAO.find_one_or_none(
        session=session_without_commit,
        filters=TelegramIDModel(telegram_id=call.from_user.id)
    )
    _, product_id, price = call.data.split('_')
    await bot.send_invoice(
        chat_id = call.from_user.id,
        title=f'–û–ø–ª–∞—Ç–∞ üëâ {price}‚ÇΩ',
        description=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {price}‚ÇΩ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π VPN –∫–ª—é—á.',
        payload = f'{user_info.id}_{product_id}',
        provider_token=settings.PROVIDER_TOKEN,
        currency='rub',
        prices=[LabeledPrice(
            label=f'–û–ø–ª–∞—Ç–∞ {price}',
            amount = int(price) * 100
        )],
        reply_markup= get_product_buy_kb(price)
    ) 
    await call.message.delete()









    
@client.callback_query(F.data.startswith('country_'))
async def create_connection(callback:CallbackQuery, user:User, bot:Bot, state:FSMContext):
    vpn_id = callback.data.split('_')[1]
    vpn = await db.get_vpn(vpn_id)
    is_vpn = await db.get_user_vpn(user, vpn)
    if is_vpn:
        await callback.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π VPN —Ä–∞–Ω–Ω–µ–µ –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')
        return
    if vpn.max_conn <= vpn.current_conn:
        await callback.answer('–ú–µ—Å—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π VPN –±–æ–ª—å—à–µ –Ω–µ—Ç!')
        return
    if vpn.price == 0:
        if user.trial_until < datetime.now():
            await callback.answer('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª –æ–∫–æ–Ω—á–µ–Ω!')
            return
        vpn_data = await create_access_key(vpn.server_ip, vpn.server_hash)
        scheduler.add_job(
            send_message,
            trigger='date',
            run_date=user.trial_until,
            args=[user.tg_id, vpn_data['id'], vpn.server_ip, vpn.server_hash, vpn.id, vpn.name],
            id= f"{user.tg_id}{vpn_data['id']}"
        )
        await db.add_user_free_vpn(user, vpn_id, 30)
        await callback.message.answer(f'‚úÖ<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!</b>\n\n'
                                      f'–°–µ—Ä–µ–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n<b>–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> \n\n'
                                      f'<code>{{vpn_data[\'accessUrl\']}}</code>')
        await callback.answer('–£—Å–ø–µ—Ö!')
    else:
        await state.set_state(st.BuyStars.wait)
        await state.updaet_data(vpn=vpn)
        await callback.message.answer(f'<b>{vpn.name}</b> \n –¶–µ–Ω–∞: {vpn.price} RUB –≤ –º–µ—Å—è—Ü. \n\n')


@client.callback_query(F.data == 'stars')
async def topup_stars(callback: CallbackQuery, state:FSMContext):
    await callback.answer('–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É')
    data = await state.get_data()
    await callback.message.asnwer_invoice(tittle='–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞',
    description=f'–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ {data["vpn"].name} –Ω–∞ 30 –¥–Ω–µ–π.',
    payload = 'balance',
    currency= 'XTR',
    prices = [LabeledPrice(label='XTR', amount=int(data['vpn'].price / 1))]
    )

@client.pre_checkout_query()
async def pre_checkout_query(query:PreCheckoutQuery):
    await query.answer(True)

@client.message(F.successful_paymant)
async def successful_paymant(message:Message, state:FSMContext, bot:Bot, user: User):
    data = await state.get_data()
    vpn = data['vpn']
    is_vpn = await db.get_user_vpn(user, vpn)
    if vpn.max_conn <= vpn.current_conn or is_vpn:
        await message.answer('üî¥–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @')
        await bot.refund_star_payment(message.from_user.id, telegram_paymant_charge_id=message.successful_payment.telegram_payment_charge_id)
        return
    if message.successful_payment.total_amount == vpn.price:
        vpn_data = await create_access_key(vpn.server_ip, vpn.server_hash)
        run_time = datetime.now() + timedelta(days=30)
        scheduler.add_job(
            send_message,
            trigger='date',
            run_date=run_time,
            args=[user.telegram_id, vpn_data['id'], vpn.server_ip, vpn.server_hash, vpn.id, vpn.name],
            id=f"send_msg_{user.tg_id}_{vpn_data['id']}"
        )
        await db.add_user_vpn(user, vpn.id, 30)
        await message.answer(f'‚úÖ<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞</b>')

    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
            